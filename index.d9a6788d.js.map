{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar headRow = document.querySelector(\"thead tr\");\nvar body = document.querySelector(\"tbody\");\nvar bodyRows = Array.from(body.querySelectorAll(\"tr\"));\n// Sort & Toggle regions\nvar columnState = new Map([\n    [\n        \"name\",\n        {\n            sorted: false\n        }\n    ],\n    [\n        \"position\",\n        {\n            sorted: false\n        }\n    ],\n    [\n        \"office\",\n        {\n            sorted: false\n        }\n    ],\n    [\n        \"age\",\n        {\n            sorted: false\n        }\n    ],\n    [\n        \"salary\",\n        {\n            sorted: false\n        }\n    ]\n]);\nvar toggleSortState = function(columnName) {\n    var state = columnState.get(columnName);\n    state.sorted = !state.sorted;\n};\nvar getSortComparator = function(columnName, ascending) {\n    var multiplier = ascending ? 1 : -1;\n    switch(columnName){\n        case \"name\":\n            return function(a, b) {\n                return multiplier * a.cells[0].textContent.localeCompare(b.cells[0].textContent);\n            };\n        case \"position\":\n            return function(a, b) {\n                return multiplier * a.cells[1].textContent.localeCompare(b.cells[1].textContent);\n            };\n        case \"office\":\n            return function(a, b) {\n                return multiplier * a.cells[2].textContent.localeCompare(b.cells[2].textContent);\n            };\n        case \"age\":\n            return function(a, b) {\n                return multiplier * (parseInt(a.cells[3].textContent) - parseInt(b.cells[3].textContent));\n            };\n        case \"salary\":\n            return function(a, b) {\n                var aSalary = parseFloat(a.cells[4].textContent.replace(/[^\\d.-]/g, \"\"));\n                var bSalary = parseFloat(b.cells[4].textContent.replace(/[^\\d.-]/g, \"\"));\n                return multiplier * (aSalary - bSalary);\n            };\n        default:\n            return null;\n    }\n};\nvar sortTable = function(columnName, comparator) {\n    var sortedRows = bodyRows.slice().sort(comparator);\n    sortedRows.forEach(function(row) {\n        return body.appendChild(row);\n    });\n};\nvar handleHeaderClick = function(e) {\n    var columnName = e.target.textContent.toLowerCase();\n    var state = columnState.get(columnName);\n    if (!state) return;\n    var ascending = !state.sorted;\n    var comparator = getSortComparator(columnName, ascending);\n    if (comparator) {\n        sortTable(columnName, comparator);\n        toggleSortState(columnName);\n    }\n};\nvar handleRowClick = function(e) {\n    var clickedRow = e.currentTarget;\n    bodyRows.forEach(function(row) {\n        return row !== clickedRow && row.classList.remove(\"active\");\n    });\n    clickedRow.classList.toggle(\"active\");\n};\nheadRow.addEventListener(\"click\", handleHeaderClick);\nbodyRows.forEach(function(row) {\n    return row.addEventListener(\"click\", handleRowClick);\n});\n// Form region\nvar employeeForm = createForm();\nvar select = createSelect();\nvar saveButton = createButton(\"Save to table\");\nvar options = [\n    \"Tokyo\",\n    \"Singapore\",\n    \"London\",\n    \"New York\",\n    \"Edinburgh\",\n    \"San Francisco\"\n];\noptions.forEach(function(optionText) {\n    var option = createOption(optionText);\n    select.appendChild(option);\n});\nvar selectLabel = createLabel(\"office\");\nselect.dataset.qa = \"office\";\nselect.setAttribute(\"name\", \"office\");\nselectLabel.appendChild(select);\nvar inputLabels = [\n    \"name\",\n    \"position\",\n    \"age\",\n    \"salary\"\n];\ninputLabels.forEach(function(labelName) {\n    var label = createLabel(labelName);\n    var input = createInput(labelName);\n    label.appendChild(input);\n    employeeForm.appendChild(label);\n});\nfunction createForm() {\n    var newForm = document.createElement(\"form\");\n    newForm.classList.add(\"new-employee-form\");\n    return newForm;\n}\nfunction createSelect() {\n    return document.createElement(\"select\");\n}\nfunction createButton(text) {\n    var button = document.createElement(\"button\");\n    button.setAttribute(\"type\", \"submit\");\n    button.textContent = text;\n    return button;\n}\nfunction createOption(text) {\n    var option = document.createElement(\"option\");\n    option.textContent = text;\n    return option;\n}\nfunction createLabel(labelName) {\n    var label = document.createElement(\"label\");\n    label.textContent = \"\".concat(capitalize(labelName), \":\");\n    return label;\n}\nfunction createInput(labelName) {\n    var input = document.createElement(\"input\");\n    input.dataset.qa = labelName;\n    input.setAttribute(\"name\", labelName);\n    input.setAttribute(\"type\", labelName === \"age\" || labelName === \"salary\" ? \"number\" : \"text\");\n    input.setAttribute(\"required\", \"\");\n    return input;\n}\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nemployeeForm.insertBefore(selectLabel, employeeForm.children[1].nextSibling);\nemployeeForm.appendChild(saveButton);\ndocument.body.appendChild(employeeForm);\nvar form = document.querySelector(\".new-employee-form\");\nsaveButton.addEventListener(\"click\", handleSaveButtonClick);\nfunction handleSaveButtonClick(e) {\n    e.preventDefault();\n    var namePerson = form.children[0].firstElementChild.value;\n    var position = form.children[1].firstElementChild.value;\n    var office = form.children[2].firstElementChild.value;\n    var age = +form.children[3].firstElementChild.value;\n    var salary = +form.children[4].firstElementChild.value;\n    if (namePerson.length < 4 || age < 18 || age > 90 || salary <= 0 || !isNaN(+position)) {\n        pushNotification(10, 10, \"Error\", \"Incorrect data fields\", \"error\");\n        return;\n    }\n    var newRow = document.createElement(\"tr\");\n    newRow.innerHTML = \"\\n    <td>\".concat(namePerson, \"</td>\\n    <td>\").concat(position, \"</td>\\n    <td>\").concat(office, \"</td>\\n    <td>\").concat(age, \"</td>\\n    <td>$\").concat(salary.toLocaleString(\"en-US\"), \"</td>\\n  \");\n    body.appendChild(newRow);\n    bodyRows.push(newRow);\n    newRow.addEventListener(\"click\", handleRowClick);\n    columnState.forEach(function(value, key) {\n        sortTable(key, getSortComparator(key, true));\n    });\n    pushNotification(10, 10, \"Success\", \"The employee was successfully added to the list\", \"success\");\n    form.reset();\n}\nvar pushNotification = function(posTop, posRight, title, description, type) {\n    var message = document.createElement(\"div\");\n    var messageTitle = document.createElement(\"h2\");\n    var messageP = document.createElement(\"p\");\n    message.classList.add(\"notification\");\n    message.dataset.qa = \"notification\";\n    message.appendChild(messageTitle);\n    message.appendChild(messageP);\n    message.style.top = posTop + \"px\";\n    message.style.right = posRight + \"px\";\n    messageTitle.textContent = title;\n    messageP.textContent = description;\n    switch(type){\n        case \"warning\":\n            message.classList.add(\"warning\");\n            break;\n        case \"success\":\n            message.classList.add(\"success\");\n            break;\n        case \"error\":\n            message.classList.add(\"error\");\n            break;\n        default:\n            break;\n    }\n    document.body.appendChild(message);\n    setTimeout(function() {\n        message.style.visibility = \"hidden\";\n    }, 2000);\n};\n\n//# sourceMappingURL=index.d9a6788d.js.map\n","'use strict';\n\nconst headRow = document.querySelector('thead tr');\nconst body = document.querySelector('tbody');\nconst bodyRows = Array.from(body.querySelectorAll('tr'));\n\n// Sort & Toggle regions\n\nconst columnState = new Map([\n  ['name', { sorted: false }],\n  ['position', { sorted: false }],\n  ['office', { sorted: false }],\n  ['age', { sorted: false }],\n  ['salary', { sorted: false }],\n]);\n\nconst toggleSortState = (columnName) => {\n  const state = columnState.get(columnName);\n\n  state.sorted = !state.sorted;\n};\n\nconst getSortComparator = (columnName, ascending) => {\n  const multiplier = ascending ? 1 : -1;\n\n  switch (columnName) {\n    case 'name':\n      return (a, b) => multiplier\n        * a.cells[0].textContent.localeCompare(b.cells[0].textContent);\n    case 'position':\n      return (a, b) => multiplier\n        * a.cells[1].textContent.localeCompare(b.cells[1].textContent);\n    case 'office':\n      return (a, b) => multiplier\n        * a.cells[2].textContent.localeCompare(b.cells[2].textContent);\n    case 'age':\n      return (a, b) => multiplier\n        * (parseInt(a.cells[3].textContent) - parseInt(b.cells[3].textContent));\n\n    case 'salary':\n      return (a, b) => {\n        const aSalary = parseFloat(\n          a.cells[4].textContent.replace(/[^\\d.-]/g, ''));\n        const bSalary = parseFloat(\n          b.cells[4].textContent.replace(/[^\\d.-]/g, ''));\n\n        return multiplier * (aSalary - bSalary);\n      };\n    default:\n      return null;\n  }\n};\n\nconst sortTable = (columnName, comparator) => {\n  const sortedRows = bodyRows.slice().sort(comparator);\n\n  sortedRows.forEach(row => body.appendChild(row));\n};\n\nconst handleHeaderClick = (e) => {\n  const columnName = e.target.textContent.toLowerCase();\n  const state = columnState.get(columnName);\n\n  if (!state) {\n    return;\n  }\n\n  const ascending = !state.sorted;\n  const comparator = getSortComparator(columnName, ascending);\n\n  if (comparator) {\n    sortTable(columnName, comparator);\n    toggleSortState(columnName);\n  }\n};\n\nconst handleRowClick = (e) => {\n  const clickedRow = e.currentTarget;\n\n  bodyRows.forEach(row => row !== clickedRow && row.classList.remove('active'));\n  clickedRow.classList.toggle('active');\n};\n\nheadRow.addEventListener('click', handleHeaderClick);\nbodyRows.forEach(row => row.addEventListener('click', handleRowClick));\n\n// Form region\n\nconst employeeForm = createForm();\nconst select = createSelect();\nconst saveButton = createButton('Save to table');\nconst options = [\n  'Tokyo', 'Singapore', 'London', 'New York', 'Edinburgh', 'San Francisco'];\n\noptions.forEach(optionText => {\n  const option = createOption(optionText);\n\n  select.appendChild(option);\n});\n\nconst selectLabel = createLabel('office');\n\nselect.dataset.qa = 'office';\nselect.setAttribute('name', 'office');\nselectLabel.appendChild(select);\n\nconst inputLabels = ['name', 'position', 'age', 'salary'];\n\ninputLabels.forEach(labelName => {\n  const label = createLabel(labelName);\n  const input = createInput(labelName);\n\n  label.appendChild(input);\n  employeeForm.appendChild(label);\n});\n\nfunction createForm() {\n  const newForm = document.createElement('form');\n\n  newForm.classList.add('new-employee-form');\n\n  return newForm;\n}\n\nfunction createSelect() {\n  return document.createElement('select');\n}\n\nfunction createButton(text) {\n  const button = document.createElement('button');\n\n  button.setAttribute('type', 'submit');\n  button.textContent = text;\n\n  return button;\n}\n\nfunction createOption(text) {\n  const option = document.createElement('option');\n\n  option.textContent = text;\n\n  return option;\n}\n\nfunction createLabel(labelName) {\n  const label = document.createElement('label');\n\n  label.textContent = `${capitalize(labelName)}:`;\n\n  return label;\n}\n\nfunction createInput(labelName) {\n  const input = document.createElement('input');\n\n  input.dataset.qa = labelName;\n  input.setAttribute('name', labelName);\n\n  input.setAttribute('type', labelName === 'age'\n    || labelName === 'salary' ? 'number' : 'text');\n  input.setAttribute('required', '');\n\n  return input;\n}\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nemployeeForm.insertBefore(selectLabel, employeeForm.children[1].nextSibling);\nemployeeForm.appendChild(saveButton);\ndocument.body.appendChild(employeeForm);\n\nconst form = document.querySelector('.new-employee-form');\n\nsaveButton.addEventListener('click', handleSaveButtonClick);\n\nfunction handleSaveButtonClick(e) {\n  e.preventDefault();\n\n  const namePerson = form.children[0].firstElementChild.value;\n  const position = form.children[1].firstElementChild.value;\n  const office = form.children[2].firstElementChild.value;\n  const age = +form.children[3].firstElementChild.value;\n  const salary = +form.children[4].firstElementChild.value;\n\n  if (namePerson.length < 4\n      || age < 18\n      || age > 90\n      || salary <= 0\n      || !isNaN(+position)) {\n    pushNotification(10, 10, 'Error', 'Incorrect data fields', 'error');\n\n    return;\n  }\n\n  const newRow = document.createElement('tr');\n\n  newRow.innerHTML = `\n    <td>${namePerson}</td>\n    <td>${position}</td>\n    <td>${office}</td>\n    <td>${age}</td>\n    <td>$${salary.toLocaleString('en-US')}</td>\n  `;\n  body.appendChild(newRow);\n  bodyRows.push(newRow);\n\n  newRow.addEventListener('click', handleRowClick);\n\n  columnState.forEach((value, key) => {\n    sortTable(key, getSortComparator(key, true));\n  });\n\n  pushNotification(10, 10,\n    'Success', 'The employee was successfully added to the list', 'success');\n  form.reset();\n}\n\nconst pushNotification = (posTop, posRight, title, description, type) => {\n  const message = document.createElement('div');\n  const messageTitle = document.createElement('h2');\n  const messageP = document.createElement('p');\n\n  message.classList.add('notification');\n  message.dataset.qa = 'notification';\n  message.appendChild(messageTitle);\n  message.appendChild(messageP);\n\n  message.style.top = posTop + 'px';\n  message.style.right = posRight + 'px';\n  messageTitle.textContent = title;\n  messageP.textContent = description;\n\n  switch (type) {\n    case 'warning':\n      message.classList.add('warning');\n      break;\n    case 'success':\n      message.classList.add('success');\n      break;\n    case 'error':\n      message.classList.add('error');\n      break;\n    default:\n      break;\n  }\n\n  document.body.appendChild(message);\n\n  setTimeout(() => {\n    message.style.visibility = 'hidden';\n  }, 2000);\n};\n"],"names":["newForm","button","headRow","document","querySelector","body","bodyRows","Array","from","querySelectorAll","columnState","Map","sorted","toggleSortState","columnName","state","get","getSortComparator","ascending","multiplier","a","b","cells","textContent","localeCompare","parseInt","aSalary","parseFloat","replace","sortTable","comparator","sortedRows","slice","sort","forEach","row","appendChild","handleRowClick","e","clickedRow","currentTarget","classList","remove","toggle","addEventListener","target","toLowerCase","employeeForm","createElement","add","select","saveButton","setAttribute","options","optionText","option","selectLabel","createLabel","labelName","label","concat","str","charAt","toUpperCase","dataset","qa","inputLabels","input","insertBefore","children","nextSibling","form","preventDefault","namePerson","firstElementChild","value","position","office","age","salary","length","isNaN","pushNotification","newRow","innerHTML","toLocaleString","push","key","reset","posTop","posRight","title","description","type","message","messageTitle","messageP","style","top","right","setTimeout","visibility"],"version":3,"file":"index.d9a6788d.js.map"}